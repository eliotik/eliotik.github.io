---
import { type CollectionEntry, getCollection, getEntry } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedCollection from "@utils/getSortedCollection";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";

export interface Props {
  post: CollectionEntry<"blog">;
  relatedPosts: CollectionEntry<"blog">[];
}

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);

  const postResult = posts.map(post => ({
    params: { slug: post.slug },
    props: { post, relatedPosts: post.data.relatedPosts },
  }));

  const pagePaths = getPageNumbers(posts.length)
    .filter(pageNum => pageNum !== 1) // Exclude page 1, it's served by /posts/index.astro
    .map(pageNum => ({
      params: { slug: String(pageNum) },
    }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post, relatedPosts} = Astro.props;

const posts = await getCollection("blog");

const sortedPosts = getSortedCollection(posts);

const relatedPostsArray = relatedPosts
? await Promise.all(
        relatedPosts?.map(async ({ collection, slug }) => {
            return await getEntry(collection, slug);
        }),
  )
: [];

const pagination = getPagination<CollectionEntry<'blog'>>({
  entities: sortedPosts,
  page: slug,
});
---

{post ? <PostDetails post={post} relatedPosts={relatedPostsArray} /> : <Posts {...pagination} />}
